// Created by dylan@hathora.dev

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Hathora.Scripts.Net.Server;
using Hathora.Scripts.Utils;
using Hathora.Scripts.Utils.Editor;
using Debug = UnityEngine.Debug;

namespace Hathora.Scripts.SdkWrapper.Editor
{
    public static class HathoraServerDeploy
    {
        /// <summary>
        /// Deploys with NetHathoraConfig opts.
        /// TODO: Support cancel token.
        /// </summary>
        /// <param name="config">Find via menu `Hathora/Find UserConfig(s)`</param>
        public static async Task DeployToHathoraAsync(NetHathoraConfig config)
        {
            if (config == null)
            {
                Debug.LogError("[HathoraServerBuild.DeployToHathoraAsync] " +
                    "Cannot find NetHathoraConfig ScriptableObject");
                return;
            }

            Debug.Log("[HathoraServerBuild.DeployToHathoraAsync] " +
                "<color=yellow>Starting...</color>");            
            
            // Prepare paths and file names that we didn't get from UserConfig
            HathoraUtils.HathoraDeployPaths deployPaths = new(config);
            
            // Generate the Dockerfile: Paths will be different for each collaborator\
            string dockerFileContent = generateDockerFileStr(deployPaths);
            await writeDockerFileAsync(
                deployPaths.PathToDockerfile,
                dockerFileContent);

            // Compress build into .tar.gz (gzipped tarball)
            List<string> filesToCompress = new()
            {
                deployPaths.PathToBuildExe, 
                deployPaths.PathToDockerfile,
            };

            await HathoraEditorUtils.TarballFilesVia7zAsync(
                deployPaths, 
                filesToCompress);

            // ----------------------------------------------
            // // Upload via the server SDK.
            // Debug.Log("[HathoraServerDeploy] <color=yellow>Preparing to deploy " +
            //     "to Hathora via Hathora SDK...</color>");
        }
        
        
        #region Dockerfile
        /// <summary>
        /// Deletes an old one, if exists, to ensure updated paths.
        /// TODO: Use this to customize the Dockerfile without editing directly.
        /// </summary>
        /// <param name="pathToDockerfile"></param>
        /// <param name="dockerfileContent"></param>
        /// <returns>path/to/Dockerfile</returns>
        private static async Task writeDockerFileAsync(
            string pathToDockerfile, 
            string dockerfileContent)
        {
            // TODO: if (!overwriteDockerfile)
            if (File.Exists(pathToDockerfile))
            {
                Debug.LogWarning("[HathoraServerDeploy.writeDockerFileAsync] " +
                    "Deleting old Dockerfile...");
                File.Delete(pathToDockerfile);
            }

            try
            {
                await File.WriteAllTextAsync(pathToDockerfile, dockerfileContent);
            }
            catch (Exception e)
            {
                Debug.LogError("[HathoraServerDeploy.writeDockerFileAsync] " +
                    $"Failed to write Dockerfile to {pathToDockerfile}:\n{e}");
                
                await Task.FromException(e);
                return;
            }
        }

        /// <summary>
        /// Writes dynamic paths
        /// TODO: Use this to customize the Dockerfile without editing directly.
        /// </summary>
        /// <param name="deployPaths"></param>
        /// <returns>"path/to/DockerFile"</returns>
        private static string generateDockerFileStr(HathoraUtils.HathoraDeployPaths deployPaths)
        {
            return $@"# This file is auto-generated by HathoraServerDeploy.cs

FROM ubuntu

COPY ./Build-Server .

CMD ./{deployPaths.ExeBuildName}.tar.gz -mode server -batchmode -nographics
";
        }
        #endregion // Dockerfile
        
    }
}
